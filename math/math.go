/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: math.i

package math

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stddef.h>
#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


extern void _wrap_Swig_free_math_4993cde1d26b4dfb(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_math_4993cde1d26b4dfb(swig_intgo arg1);
extern swig_intgo _wrap_Math_add_math_4993cde1d26b4dfb(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3);
extern uintptr_t _wrap_new_Math_math_4993cde1d26b4dfb(void);
extern void _wrap_delete_Math_math_4993cde1d26b4dfb(uintptr_t arg1);
#undef intgo
*/
import "C"

import "syscall"
import "unsafe"
import "sync"


type _ syscall.Sockaddr




type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


func getSwigcptr(v interface { Swigcptr() uintptr }) uintptr {
	if v == nil {
		return 0
	}
	return v.Swigcptr()
}


type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_math_4993cde1d26b4dfb(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_math_4993cde1d26b4dfb(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrMath uintptr

func (p SwigcptrMath) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMath) SwigIsMath() {
}

func (arg1 SwigcptrMath) Add(arg2 int, arg3 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_Math_add_math_4993cde1d26b4dfb(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2)))
	return swig_r
}

func NewMath() (_swig_ret Math) {
	var swig_r Math
	swig_r = (Math)(SwigcptrMath(C._wrap_new_Math_math_4993cde1d26b4dfb()))
	return swig_r
}

func DeleteMath(arg1 Math) {
	_swig_i_0 := getSwigcptr(arg1)
	C._wrap_delete_Math_math_4993cde1d26b4dfb(C.uintptr_t(_swig_i_0))
}

type Math interface {
	Swigcptr() uintptr
	SwigIsMath()
	Add(arg2 int, arg3 int) (_swig_ret int)
}


